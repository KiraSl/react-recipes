{"version":3,"sources":["RecipeCard.js","routes/HomePage.js","routes/RecipeDetails.js","App.js","serviceWorker.js","index.js"],"names":["RecipeCard","recipe","id","image","title","description","className","to","src","alt","HomePage","props","state","recipes","fetch","response","json","this","setState","map","i","key","React","Component","RecipeDetails","match","params","recipeDetail","dangerouslySetInnerHTML","__html","serves","ingredients","ingredient","index","subRecipeDetail","preparationSteps","step","App","exact","path","component","render","routeProps","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae377363.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nconst RecipeCard = ({ recipe }) => {\n  const { id, image, title, description } = recipe\n\n  return (\n    <div className=\"col-sm-6 col-lg-4 mb-4 d-flex\">\n      <div className=\"card\">\n        <Link to={`/react-recipes/recipe/${id}`}>\n          <img src={`/react-recipes${image}`} className=\"card-img-top\" alt={title} />\n        </Link>\n        <div className=\"card-body\">\n          <Link to={`/react-recipes/recipe/${id}`} className=\"h5 text-uppercase\">\n            {title}\n          </Link >\n          <p className=\"card-text\">{description}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nRecipeCard.propTypes = {\n  recipe: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n  }),\n}\n\nexport { RecipeCard }\n","import React from 'react'\nimport { RecipeCard } from '../RecipeCard'\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recipes: [],\n    }\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/react-recipes/api/recipes/all.json')\n    const recipes = await response.json()\n    this.setState({ recipes })\n  }\n\n  render() {\n    const { recipes } = this.state\n\n    return (\n      <>\n        <p className=\"text-center mb-4\">Browse all the recipes here, select a category or search for an ingredient.</p>\n        <div className=\"row\">\n          {recipes.map((recipe, i) => <RecipeCard recipe={recipe} key={i} />)}\n        </div>\n      </>\n    )\n  }\n}\n\nexport { HomePage }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RecipeDetails extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recipe: {},\n    }\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`/react-recipes/api/recipes/${this.props.match.params.id}.json`)\n    const recipe = await response.json()\n    this.setState({ recipe })\n  }\n\n  render() {\n    const { recipe, recipe: { recipeDetail } } = this.state\n\n    return (\n      <>\n        <div className=\"text-center\">\n          <h2 className=\"text-secondary text-uppercase mb-4\">{recipe.title}</h2>\n          <p>{recipe.description}</p>\n          <img\n            src={`/react-recipes${recipeDetail?.image}`}\n            alt={recipe.title}\n            className=\"pb-4\"\n          />\n        </div>\n        <div\n          className=\"border-bottom pb-4\"\n          dangerouslySetInnerHTML={\n            { __html: recipeDetail?.description }\n          }>\n        </div>\n        <h6 className=\"text-secondary text-uppercase my-4\">{recipe.title}</h6>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <p className=\"font-italic\">\n              Serves {recipeDetail?.serves}\n            </p>\n            <ul className=\"list-unstyled\">\n              {recipeDetail?.ingredients.map((ingredient, index) => (\n                <li className=\"font-weight-bold\" key={index}>{ingredient}</li>\n              ))}\n            </ul>\n            {recipeDetail?.subRecipeDetail && (\n              <>\n                <p className=\"font-italic\">For the {recipeDetail.subRecipeDetail.title}</p>\n                <ul className=\"list-unstyled\">\n                  {recipeDetail.subRecipeDetail.ingredients.map((ingredient, index) => (\n                    <li className=\"font-weight-bold\" key={index}>{ingredient}</li>\n                  ))}\n                </ul>\n              </>\n            )}\n          </div>\n          <div className=\"col-md-8\">\n            {recipeDetail?.preparationSteps.map((step, index) => (\n              <p key={index}>{step}</p>\n            ))}\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nRecipeDetails.propTypes = {\n  match: PropTypes.object,\n}\n\nexport { RecipeDetails }\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport { HomePage } from './routes/HomePage'\nimport { RecipeDetails } from './routes/RecipeDetails'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <nav className=\"d-flex justify-content-center\">\n          <Link to=\"/react-recipes\" className=\"h1 my-4 text-primary\">\n            React Recipes\n          </Link>\n        </nav>\n        <div className=\"container\">\n          <Route exact path=\"/react-recipes\" component={HomePage} />\n          <Route exact path=\"/react-recipes/recipe/:id\" render={routeProps => (<RecipeDetails {...routeProps} />)} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}